package com.group3.CRMtests;

import java.util.ArrayList;
import java.util.Arrays;

//import com.group3.CRMbasics.ArrayList;
import com.group3.CRMbasics.BaseTest;
import com.group3.CRMlistners.ExtentManager;
import com.group3.CRMlogs.Logs;
import com.group3.CRMpages.CreateUserPage;

import java.text.ParseException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateUserTest extends BaseTest {

	//CreateUserTest userPage;
	WebDriver driver;//=userPage.getDriver();
	CreateUserPage userPage;

	public void login() {
		Logs.info("User is successfully logged in");
		ExtentManager.logTestInfo("User is successfully logged in");
		//String title = driver.getTitle();
		//System.out.println("Page title is: " + title);
	}
	public void commonfunctionality() throws InterruptedException {
		login();
		driver=getDriver();
		userPage= new CreateUserPage(driver);
		Actions actions= new Actions(driver);
		Thread.sleep(3000);

		basepage.waitForElement(userPage.getAdminMenu(),Duration.ofSeconds(1000));
		actions.moveToElement(userPage.getAdminMenu()).perform();
		basepage.waitForElement(userPage.getCreateUserLink(),Duration.ofSeconds(1000));
		actions.moveToElement(userPage.getCreateUserLink()).click().perform();
	}
	public void commonfunctionality1() throws InterruptedException {
		driver=getDriver();
		userPage= new CreateUserPage(driver);
		Actions actions= new Actions(driver);
		Thread.sleep(3000);		
		basepage.waitForElement(userPage.getAdminMenu(),Duration.ofSeconds(1000));
		actions.moveToElement(userPage.getAdminMenu()).perform();
		basepage.waitForElement(userPage.getCreateUserLink(),Duration.ofSeconds(1000));
		actions.moveToElement(userPage.getCreateUserLink()).click().perform();
		Logs.info("success opening createuser page");
		ExtentManager.logTestInfo("success opening createuser page");
	}

	@Test
	public void TC_004and113passwordIsmasked() throws InterruptedException {
		commonfunctionality();
		userPage.enterPassword("ghjgjh");
		userPage.clickSubmit();

		String fieldType = userPage.getPasswordInput().getAttribute("type");
		Logs.info("password mask testcase ");
		ExtentManager.logTestInfo("in passwordmasked testcase");

		Assert.assertEquals(fieldType, "password", "Password field is not masked.");
	}

	@Test(priority=2)
	public void TC_02testuniqueIdGenerated() throws InterruptedException {


		commonfunctionality1();		
		List<WebElement> rowsBefore1=userPage.getTableRows();
		//userPage.waitForElement(rowsBefore1, Duration.ofSeconds(1000));
		int initialRowCount1 = rowsBefore1.size();
		System.out.println("count is"+initialRowCount1);
		commonfunctionality();
		String username=	userPage.getRandomAlphaString(7);
		String username1=userPage.getRandomAlphaString(8);
		Random random = new Random();
		userPage.createUser(username1, userPage.generateMobileNumber(), userPage.getRandomAlphaString(3)+"@stmail.com",username,"fgghgj");
		Thread.sleep(3000);
		userPage.getFirstCell();
		WebElement firstCell = driver.findElement(By.xpath("//table[@class='table table-striped table-hover']//tbody/tr[1]/td[1]"));
		String value = userPage.getFirstCell().getText();
		System.out.println("First value in the table: " + value);
		if (value!=null)
			Assert.assertEquals(true,true);
		List<WebElement> rowsAfter=userPage.getTableRows();
		WebElement newRow =rowsAfter.get(rowsAfter.size() - 1);
		String autoGeneratedId = userPage.getTextFromFirstCellOf(newRow); 
		System.out.println("autoGenerated ID: " + autoGeneratedId);
		Logs.info("unique Id is generated TC");
		ExtentManager.logTestInfo("unique Id is generated TC");
	}
	@Test(priority=1)
	public void TC_01testCreateUserValidData() throws Throwable {


		commonfunctionality();
		String username=	userPage.getRandomAlphaString(7);
		String username1=userPage.getRandomAlphaString(8);
		userPage.createUser(username1, userPage.generateMobileNumber(), userPage.getRandomAlphaString(3)+"@stmail.com",username,"fgghgj");
		Thread.sleep(3000);
		WebElement alertMsg = userPage.getAlertMsg();;
		String alertText = alertMsg.getText();
		System.out.println("Alert Message: " + alertText);	
		String title = driver.getTitle();
		System.out.println("Page title is: " + title);
		Assert.assertEquals(alertText, "User "+username1+" Successfully Added");
		// Add assertion here based on success message or redirection

	}
	@Test
	public void loginwithuserWithoutAdminRightTC_201() throws Throwable {


		commonfunctionality();
		Actions actions=new Actions(driver);
		actions.moveToElement(userPage.getSigouthover()).perform();
		actions.moveToElement(userPage.getLogout()).click().perform();



		WebElement emailField = driver.findElement(By.id("username"));
		//basepage.waitForVisibilty(emailField, Duration.ofSeconds(30), "Email field");
		basepage.elementSendText(emailField, "hellonew", "Username");
		// WebElement password = driver.findElement(By.xpath("//*[@id='inputPassword']"));
		WebElement password = driver.findElement(By.id("inputPassword"));
		basepage.elementSendText(password, "1234567", "Password");
		/*
		 * WebElement loginButton = driver.findElement(By.id("Login"));
		 * basepage.waitForVisibilty(loginButton, Duration.ofSeconds(30),
		 * "Login button"); basepage.buttonCheck(loginButton, "Login");
		 */
		WebElement SignInButton = driver.findElement(By.xpath("//button[text()='Sign In']"));
		basepage.waitForVisibilty(SignInButton, Duration.ofSeconds(30), "Sign In button");
		basepage.buttonCheck(SignInButton, "Sign In");
		Thread.sleep(3000);
		if(userPage.getSigouthover().isDisplayed())
			System.out.println("fail testcase");
		//Assert.assertEquals(alertText, "User "+username1+" Successfully Added");
		// Add assertion here based on success message or redirection

	}
	@Test
	public void TC_08userNameFieldBlankAlert() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys(""); 
		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;", fullNameInput);

		System.out.println("Pattern Validation Message: " + patternMessage);

		Assert.assertEquals(patternMessage, "Please fill out this field.");
		Logs.info("checkuserNamefieldEmpty Alrt message");
		ExtentManager.logTestInfo("checkuserNamefieldEmpty Alrt message");
	}
	@Test
	public void verifyFormGroupLabels() throws InterruptedException {
		commonfunctionality();
		// Expected list
		List<String> expectedLabels = Arrays.asList(
				"User ID:", "User's Full Name*", "Mobile*", "Email*", "Date Of Birth:", "Username*", "Password*"
				);

		// Actual list from UI
		List<WebElement> formGroups = driver.findElements(By.xpath("//div[@class='form-group']//label"));
		List<String> actualLabels = new ArrayList<>();

		for (WebElement el : formGroups) {
			actualLabels.add(el.getText().trim());
		}

		// Assertion
		Assert.assertEquals(actualLabels, expectedLabels, "Form group labels do not match expected list");
	}


	@Test
	public void TC_09userMobileldBlankAlert() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		userPage.enterFirstName("ghghgj");
		userPage.entermobileNumber("");
		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;",userPage.getEmailInput());

		System.out.println("Pattern Validation Message: " + patternMessage);

		Thread.sleep(3000);
	}
	@Test
	public void TC_10userEmailBlankAlert() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys("");
		userPage.entermobileNumber("123abc!@#");
		String actualValue = userPage.getMobileNumber().getAttribute("value");
		System.out.println("Final value in field: " + actualValue);
		userPage.enterEmail("");
		userPage.clickSubmit();

		JavascriptExecutor js = (JavascriptExecutor) driver; String patternMessage =
				(String) js.executeScript( "return arguments[0].validationMessage;",
						userPage.getMobileNumber());

		System.out.println("Pattern Validation Message: " + patternMessage);

		//mobileField.sendKeys("123abc!@#");
	}

	@Test
	public void validuserEmailId() throws InterruptedException {
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys("");
		userPage.entermobileNumber("123abc!@#");
		String actualValue = userPage.getMobileNumber().getAttribute("value");
		System.out.println("Final value in field: " + actualValue);
		userPage.enterEmail("");

	}

	@Test
	public void testInvalidEmailShowsError() throws InterruptedException {
		// 1. Find the email input field and enter an invalid email
		commonfunctionality();
		userPage.getEmailInput().clear();
		
		
		userPage.getEmailInput().sendKeys("invalid-email"); // Invalid format
		userPage.getEmailInput().sendKeys(Keys.TAB); // Trigger blur to fire validation

		// 2. Locate the error message
		
		WebElement errorMessage=userPage.getErrorMessage();

		// 3. Assert error message is displayed and correct
		Assert.assertTrue(errorMessage.isDisplayed(), "Error message should be displayed for invalid email");
		Thread.sleep(4000);
		Assert.assertEquals(errorMessage.getText().trim(), "Please enter a valid email address");
	}

	@Test
	public void TC_03testDobLessThan18ShowsError() throws InterruptedException, ParseException {
		// Go to the form page
		commonfunctionality();

		// Calculate a date less than 18 years ago (e.g., today - 17 years)
		LocalDate underageDob = LocalDate.now().minusYears(17);
		String dobString = underageDob.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

		// Enter DOB
		userPage.getDateOfBirthInput().clear();
		userPage.getDateOfBirthInput().sendKeys(dobString);
		userPage.getDateOfBirthInput().sendKeys(Keys.TAB); // Trigger validation


		Thread.sleep(3000);

		// Assert error is shown
		if(userPage.isValidDate(dobString))		
			System.out.println("date is in correct format"+dobString);
		//	Assert.assertTrue(userPage.isDobErrorVisible(), "DOB error message should be displayed for age < 18");
		//Assert.assertEquals(userPage.getDobErrorMessage(), "Age must be 18 or older"); // replace with actual text
	}

	@Test
	public void TC_106userUsernameBlankAlert() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys("uyjhkjhjk"); 
		userPage.entermobileNumber("1233444556");
		userPage.enterEmail("asd@g.com");
		userPage.enterUserName("");
		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;", userPage.getUserName());

		System.out.println("Pattern Validation Message: " + patternMessage);


	}

	@Test
	public void TC_108userPasswordBlankAlert() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys("uyjhkjk"); 
		userPage.entermobileNumber("1633444556");
		userPage.enterEmail("asd@g1.com"); 
		userPage.enterUserName("hjghjh");
		userPage.enterPassword("");
		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;", userPage.getPasswordInput());

		System.out.println("Pattern Validation Message: " + patternMessage);


	}
	@Test
	public void userPasswordlessTan6DigitTC_109() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		WebElement fullNameInput = driver.findElement(By.name("empName"));
		fullNameInput.sendKeys("uyjhkjk"); 
		userPage.entermobileNumber("1633444556");
		userPage.enterEmail("asd@g1.com"); 
		userPage.enterUserName("hjghjh");
		userPage.enterPassword("trtyh");
		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;", userPage.getPasswordInput());

		System.out.println("Pattern Validation Message: " + patternMessage);


	}
	

	@Test
	public void usernameduplicateErrorTc_07() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		userPage.enterFirstName(userPage.getRandomAlphaString(7)); 
		userPage.entermobileNumber(userPage.generateMobileNumber()); 
		userPage.enterEmail(userPage.getRandomAlphaString(3)+"@stmail.com");
		userPage.enterUserName("TcEkFVX");
		userPage.enterPassword(userPage.getRandomAlphaString(7));


		userPage.clickSubmit();
		Thread.sleep(4000);
		System.out.println(userPage.getDuplicateUserMessage().getText().trim());

		// 3. Assert error message is displayed and correct
		//Assert.assertTrue(userPage.getDuplicateUserMessage().isDisplayed(), "Error message should be displayed for invalid email");
		Thread.sleep(4000);
		//Assert.assertEquals(userPage.getDuplicateUserMessage().getText().trim(), "username: TcEkFVX already exists");

	}
	@Test
	public void TC_109PasswordAlertMsgForlengthlessthan6() throws InterruptedException
	{
		// Invalid, only one word
		commonfunctionality();
		userPage.enterFirstName(userPage.getRandomAlphaString(7)); 
		userPage.entermobileNumber(userPage.generateMobileNumber()); 
		userPage.enterEmail(userPage.getRandomAlphaString(3)+"@stmail.com");
		userPage.enterUserName(userPage.getRandomAlphaString(7));
		userPage.enterPassword(userPage.getRandomAlphaString(5));


		userPage.clickSubmit();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String patternMessage = (String) js.executeScript(
				"return arguments[0].validationMessage;", userPage.getPasswordInput());

		System.out.println("Pattern Validation Message: " + patternMessage);
		
		// 3. Assert error message is displayed and correct
		//Assert.assertTrue(userPage.getDuplicateUserMessage().isDisplayed(), "Error message should be displayed for invalid email");
		Thread.sleep(4000);
		//Assert.assertEquals(userPage.getDuplicateUserMessage().getText().trim(), "username: TcEkFVX already exists");

	}


}
